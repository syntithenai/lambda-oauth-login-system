
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Wed Jun 23 2021 22:16:39 GMT+1000 (Australian Eastern Standard Time)
 * Suite: forgot password
 * 
 * Manually integrate server and mongoose
 */
const path = require('path')
const cors = require('cors')
const axiosLib = require('axios');
const fs = require('fs');
const fse = require('fs-extra');
const http = require('http');
const loginSystem = require('express-oauth-login-system-server')
const express = require('express');
const config = require('../test-config')
const dbHandler = require('../db-handler');
var User = null //require('../../database/User')
var OAuthClient = null //require('../../database/OAuthClient')

var app = null

var server = null
var template = ''
var port = 5100
const ORIGIN = 'http://localhost:' + port
const baseUrl = ORIGIN + "/dev/login"

var nVer = process.version.match( /^v(\d+)/ );
if ( !nVer || nVer[ 1 ] < 9 ) {
  console.error( "WARNING: You have an outdated Node.js version " + process.version
    + ". You need at least v.9.x to run this test suite." );
}


const {
        bs, util, fetch, localStorage
      } = require( "../lib/bootstrap" )( "forgot--password" ),
      puppeteerOptions = require( "../puppeteer.config.json" ),
      devices = require( "puppeteer" ).devices;




jest.setTimeout( 50000 );

let consoleLog = [], // assetConsoleMessage
    dialogLog = []; // assertDialog;

bs.TARGETS = {};

// Environment variables
let ENV = {
  "BASE_URL": baseUrl,
};

bs.TARGETS[ "BUTTON_CLASS_BTN_BTN_SUCCESS" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/nav[1]/div[1]/a[1]/button[1]", false, "BUTTON_CLASS_BTN_BTN_SUCCESS" );
bs.TARGETS[ "INPUT_ID_NAME" ] = async () => await bs.query( "#name", true, "INPUT_ID_NAME" );
bs.TARGETS[ "INPUT_ID_EMAIL" ] = async () => await bs.query( "#email", true, "INPUT_ID_EMAIL" );
bs.TARGETS[ "INPUT_ID_INPUTEMAIL" ] = async () => await bs.query( "#email", true, "INPUT_ID_INPUTEMAIL" );
bs.TARGETS[ "INPUT_ID_PASSWORD" ] = async () => await bs.query( "#password", true, "INPUT_ID_PASSWORD" );
bs.TARGETS[ "INPUT_ID_PASSWORD2" ] = async () => await bs.query( "#password2", true, "INPUT_ID_PASSWORD2" );
bs.TARGETS[ "BUTTON_CLASS_BTN_BTN_LG_BTN_SUCCESS_BTN_BLOCK" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[2]/div[1]/div[1]/form[1]/button[1]", false, "BUTTON_CLASS_BTN_BTN_LG_BTN_SUCCESS_BTN_BLOCK" );
bs.TARGETS[ "BUTTON_ID_NAV_LOGIN_BUTTON" ] = async () => await bs.query( "#nav_login_button", true, "BUTTON_ID_NAV_LOGIN_BUTTON" );
bs.TARGETS[ "BUTTON_ID_SEND_RECOVERY_BUTTON" ] = async () => await bs.query( "#send_recovery_button", true, "BUTTON_ID_SEND_RECOVERY_BUTTON" );
bs.TARGETS[ "NAV_FORGOT_BUTTON" ] = async () => await bs.query( "#nav_forgot_button", true, "NAV_FORGOT_BUTTON" );

describe( "forgot password", () => {
		
		
	function getAxiosClient(token,cookies) {
		var headers = {'Origin': ORIGIN}
		if (token) {
			headers['Authorization'] =  'Bearer '+token
		}
		if (cookies) {
			headers['Cookie'] =  cookies.join("; ")
		}
		 
		var authClient = axiosLib.create({
			  baseURL: baseUrl,
			  timeout: 3000,
			  headers: headers,
			  withCredentials: true
			});
		return authClient
	}

	const axios = getAxiosClient()

	
  beforeAll(async () => {
    // server
	var uri = await dbHandler.connect()
	const login = await loginSystem(Object.assign({},config, {databaseConnection:uri, authServer:ORIGIN+"/api", loginServer:ORIGIN+"/"}))
	// extract models
	User = login.database.User
	OAuthClient = login.database.OAuthClient
	app = express();
	app.use('/dev/login/api/',	cors(), login.router)
	app.use('/dev/login/',cors(), function (req,res) {
		if (!template.trim()) {
			template = String(fs.readFileSync(path.join(__dirname,'../../react-login-example/build', 'index.html')))
			var pre = template.slice(0,400).replace('###MARKER_loginServer###',config.loginServer).replace('###MARKER_allowedOrigins###',config.allowedOrigins)
			template = pre + template.slice(400)		
		}
		res.send( template);
	});
	server =  http.createServer({
		//key: fs.readFileSync(process.env.sslKeyFile),
		//cert: fs.readFileSync(process.env.sslCertFile),
	}, app).listen(port, () => {
	  //console.log(`Login server listening  at http://localhost:`+port)
	}) 
    // puppeteer
    await bs.setup( puppeteerOptions, {"allure":false});
    await util.once(async () => {
      bs.browser && console.log( "BROWSER: ", await bs.browser.version() );
      await util.savePuppetterInfo( bs );
    });

    bs.page.on( "console", ( message ) => consoleLog.push( message ) );
    bs.page.on( "dialog", ( dialog ) => dialogLog.push( dialog ) );
	bs.page.on('response', async (response) => {
		const url = new URL(response.url());
		let filePath = path.resolve(`./output${url.pathname}`);
		if (path.extname(url.pathname).trim() === '') {
		  filePath = `${filePath}/index.html`;
		}
		if (filePath.length < 300) {
			await fse.outputFile(filePath, await response.buffer());
		}
	  });
  });

  afterAll(async () => {
	await dbHandler.closeDatabase()
	await server.close()
    await bs.teardown();
  });
	
  afterEach(async () => await dbHandler.clearDatabase());



	beforeEach(async () => {
		var clients = await OAuthClient.deleteMany({})
		var client = new OAuthClient({
				clientId: config.clientId, 
				clientSecret:config.clientSecret,
				name:config.clientName,
				website_url:config.clientWebsite,
				privacy_url:config.clientPrivacyPage,
				redirectUris:[],
				image:''
			})
		await client.save()
	})

  describe( "login system e2e tests", () => {

    test( "forgot password", async () => {
      let result, assert, searchStr, localEnv;

      // Navigating to http://localhost:3000/
      //http://localhost:5100/dev/login
      bs.performance.reset();
      await bs.page.goto( baseUrl, {"timeout":30000,"waitUntil":"domcontentloaded"} );
    
      // Defining browser viewport
      await bs.page.setViewport({
        width: 1648,
        height: 563,
        deviceScaleFactor: undefined,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
	//await bs.page.screenshot({ path: './login.png' });

      // Wait for CSS selector/Xpath to appear in page
      //await bs.page.waitForSelector( "#nav_login_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_ID_NAV_LOGIN_BUTTON" ) ).click( {"button":"left"} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#nav_forgot_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "NAV_FORGOT_BUTTON" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#email" );
      await bs.page.screenshot({ path: './login.png' });
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_EMAIL" ) ).type( "jojojones@syntithenai.com" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#password" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_PASSWORD" ) ).type( "aaa" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#password2" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_PASSWORD2" ) ).type( "aaa" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#send_recovery_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_ID_SEND_RECOVERY_BUTTON" ) ).click( {"button":"left"} );
    });
    
    
     test( "login", async () => {
      let result, assert, searchStr, localEnv;

      // Navigating to http://localhost:3000/
      //http://localhost:5100/dev/login
      bs.performance.reset();
      await bs.page.goto( baseUrl, {"timeout":30000,"waitUntil":"domcontentloaded"} );
    
      // Defining browser viewport
      await bs.page.setViewport({
        width: 1648,
        height: 563,
        deviceScaleFactor: undefined,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
	//await bs.page.screenshot({ path: './login.png' });

      // Wait for CSS selector/Xpath to appear in page
      //await bs.page.waitForSelector( "#nav_login_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_ID_NAV_LOGIN_BUTTON" ) ).click( {"button":"left"} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#nav_forgot_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "NAV_FORGOT_BUTTON" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#email" );
      await bs.page.screenshot({ path: './login.png' });
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_EMAIL" ) ).type( "jojojones@syntithenai.com" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#password" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_PASSWORD" ) ).type( "aaa" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#password2" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_PASSWORD2" ) ).type( "aaa" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#send_recovery_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_ID_SEND_RECOVERY_BUTTON" ) ).click( {"button":"left"} );
    });
    
    
     test( "registration", async () => {
      let result, assert, searchStr, localEnv;

      // Navigating to http://localhost:3000/
      bs.performance.reset();
      await bs.page.goto( baseUrl, {"timeout":30000,"waitUntil":"domcontentloaded"} );
    

      // Defining browser viewport
      await bs.page.setViewport({
        width: 1648,
        height: 563,
        deviceScaleFactor: undefined,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
  
      // Wait for CSS selector/Xpath to appear in page
      //await bs.page.waitForSelector( "#nav_login_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_ID_NAV_LOGIN_BUTTON" ) ).click( {"button":"left"} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#nav_forgot_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "NAV_FORGOT_BUTTON" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#email" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_EMAIL" ) ).type( "jojojones@syntithenai.com" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#password" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_PASSWORD" ) ).type( "aaa" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#password2" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_PASSWORD2" ) ).type( "aaa" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#send_recovery_button" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_ID_SEND_RECOVERY_BUTTON" ) ).click( {"button":"left"} );
      
      //expect(cres.data.message).toBe('Check your email to confirm your sign up.')
		await bs.page.waitForSelector( "REGISTRATION_CONFIRMATION" );
		
		// check user in db
		var res = await User.findOne({username: 'jojojones@syntithenai.com'})
		expect(res.signup_token).toBeTruthy()
		expect(parseInt(res.signup_token_timestamp)).toBeGreaterThan(0)
		// do confirmation
		var rres = await axios.get('/doconfirm?code='+res.signup_token)
		console.log(rres.data)
		
    });

  });


});
